/* The following code was generated by JFlex 1.4.3 on 10/10/14 02:52 */

package com.nraynaud.ada;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.nraynaud.ada.psi.AdaTypes;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/10/14 02:52 from the specification file
 * <tt>/Users/nraynaud/dev/adaplugin/src/com/nraynaud/ada/Gpr.flex</tt>
 */
class GprLexer implements FlexLexer {
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };
    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\14\1\12\1\0\1\14\1\13\22\0\1\14\1\0\1\15" +
                    "\1\10\3\0\1\16\3\0\1\5\1\0\1\6\1\7\1\0\12\1" +
                    "\7\0\4\2\1\11\25\2\4\0\1\3\1\0\1\17\1\20\1\25" +
                    "\1\31\1\4\1\35\1\34\1\42\1\30\1\46\1\43\1\27\1\40" +
                    "\1\32\1\21\1\26\1\45\1\22\1\24\1\23\1\37\1\44\1\41" +
                    "\1\36\1\33\1\2\uff85\0";
    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\2\3\1\1\2\4\1\5\2\1" +
                    "\22\3\4\0\3\3\1\6\1\0\1\7\1\0\2\3" +
                    "\1\10\41\3\1\2\1\0\1\2\1\0\4\3\1\11" +
                    "\1\3\1\10\44\3\1\0\1\2\35\3\1\0\23\3";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\47\0\116\0\165\0\234\0\303\0\47\0\352" +
                    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222" +
                    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a" +
                    "\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492" +
                    "\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u0138\0\u057c\0\u05a3" +
                    "\0\u05ca\0\u05f1\0\165\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4" +
                    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec" +
                    "\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924" +
                    "\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c" +
                    "\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94" +
                    "\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\47\0\u0c57\0\u0c7e\0\u0ca5" +
                    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd" +
                    "\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15" +
                    "\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d" +
                    "\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185" +
                    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd" +
                    "\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5" +
                    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d" +
                    "\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665" +
                    "\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d" +
                    "\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5" +
                    "\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\2\2" +
                    "\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\4\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\5\4\50\0\1\3\1\0\1\36\1\37\2\0" +
                    "\1\40\1\41\1\37\36\0\4\4\4\0\1\4\5\0" +
                    "\30\4\1\0\4\4\4\0\1\4\5\0\10\4\1\42" +
                    "\2\4\1\43\3\4\1\44\10\4\6\0\1\45\52\0" +
                    "\1\7\50\0\1\11\32\0\15\46\1\47\31\46\12\50" +
                    "\1\0\34\50\1\0\4\4\4\0\1\4\5\0\1\4" +
                    "\1\51\1\4\1\52\1\53\1\4\1\54\1\4\1\55" +
                    "\2\4\1\56\14\4\1\0\3\4\1\57\4\0\1\4" +
                    "\5\0\2\4\1\60\25\4\1\0\4\4\4\0\1\4" +
                    "\5\0\3\4\1\53\1\61\11\4\1\53\1\4\1\62" +
                    "\7\4\1\0\3\4\1\63\4\0\1\4\5\0\1\64" +
                    "\27\4\1\0\3\4\1\65\4\0\1\4\5\0\1\66" +
                    "\13\4\1\67\6\4\1\70\4\4\1\0\3\4\1\71" +
                    "\4\0\1\4\5\0\20\4\1\72\7\4\1\0\4\4" +
                    "\4\0\1\4\5\0\1\73\1\4\1\74\25\4\1\0" +
                    "\4\4\4\0\1\4\5\0\1\75\2\4\1\76\24\4" +
                    "\1\0\4\4\4\0\1\4\5\0\2\4\1\77\6\4" +
                    "\1\100\16\4\1\0\4\4\4\0\1\4\5\0\5\4" +
                    "\1\53\5\4\1\53\2\4\1\53\11\4\1\0\3\4" +
                    "\1\101\4\0\1\4\5\0\2\4\1\53\6\4\1\102" +
                    "\16\4\1\0\3\4\1\103\4\0\1\4\5\0\2\4" +
                    "\1\62\15\4\1\104\7\4\1\0\3\4\1\105\4\0" +
                    "\1\4\5\0\2\4\1\106\25\4\1\0\4\4\4\0" +
                    "\1\4\5\0\2\4\1\107\15\4\1\110\7\4\1\0" +
                    "\4\4\4\0\1\4\5\0\2\4\1\107\25\4\1\0" +
                    "\4\4\4\0\1\4\5\0\5\4\1\111\5\4\1\112" +
                    "\14\4\1\0\4\4\4\0\1\4\5\0\2\4\1\56" +
                    "\25\4\1\0\4\4\4\0\1\4\5\0\11\4\1\113" +
                    "\11\4\1\114\4\4\1\0\1\3\46\0\1\115\3\0" +
                    "\2\116\41\0\1\117\46\0\2\120\1\0\1\120\4\0" +
                    "\1\120\5\0\30\120\1\0\4\4\4\0\1\4\5\0" +
                    "\5\4\1\121\22\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\122\5\4\1\53\15\4\1\0\4\4\4\0" +
                    "\1\4\5\0\4\4\1\123\1\4\1\124\2\4\1\62" +
                    "\16\4\12\45\2\0\33\45\15\0\1\46\47\0\1\125" +
                    "\31\0\4\4\4\0\1\4\5\0\2\4\1\126\2\4" +
                    "\1\127\22\4\1\0\4\4\4\0\1\4\5\0\3\4" +
                    "\1\130\24\4\1\0\4\4\4\0\1\4\5\0\6\4" +
                    "\1\131\21\4\1\0\4\4\4\0\1\4\5\0\10\4" +
                    "\1\53\1\132\16\4\1\0\4\4\4\0\1\4\5\0" +
                    "\12\4\1\53\15\4\1\0\4\4\4\0\1\4\5\0" +
                    "\15\4\1\133\12\4\1\0\4\4\4\0\1\4\5\0" +
                    "\12\4\1\134\15\4\1\0\4\4\4\0\1\4\5\0" +
                    "\23\4\1\135\4\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\53\23\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\136\1\4\1\137\4\4\1\140\5\4\1\53" +
                    "\3\4\1\141\1\142\1\4\1\0\4\4\4\0\1\4" +
                    "\5\0\11\4\1\73\1\4\1\143\14\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\144\24\4\1\0\4\4" +
                    "\4\0\1\4\5\0\5\4\1\145\7\4\1\146\12\4" +
                    "\1\0\4\4\4\0\1\4\5\0\7\4\1\111\20\4" +
                    "\1\0\3\4\1\147\4\0\1\4\5\0\30\4\1\0" +
                    "\4\4\4\0\1\4\5\0\7\4\1\150\1\151\17\4" +
                    "\1\0\4\4\4\0\1\4\5\0\1\4\1\152\26\4" +
                    "\1\0\4\4\4\0\1\4\5\0\5\4\1\111\22\4" +
                    "\1\0\4\4\4\0\1\4\5\0\13\4\1\153\14\4" +
                    "\1\0\4\4\4\0\1\4\5\0\6\4\1\154\21\4" +
                    "\1\0\4\4\4\0\1\4\5\0\1\155\1\4\1\156" +
                    "\6\4\1\157\16\4\1\0\4\4\4\0\1\4\5\0" +
                    "\2\4\1\160\25\4\1\0\4\4\4\0\1\4\5\0" +
                    "\21\4\1\161\6\4\1\0\4\4\4\0\1\4\5\0" +
                    "\6\4\1\162\1\4\1\163\17\4\1\0\4\4\4\0" +
                    "\1\4\5\0\15\4\1\164\12\4\1\0\4\4\4\0" +
                    "\1\4\5\0\22\4\1\53\5\4\1\0\4\4\4\0" +
                    "\1\4\5\0\10\4\1\165\17\4\1\0\4\4\4\0" +
                    "\1\4\5\0\13\4\1\166\14\4\1\0\4\4\4\0" +
                    "\1\4\5\0\4\4\1\167\23\4\1\0\4\4\4\0" +
                    "\1\4\5\0\3\4\1\53\24\4\1\0\4\4\4\0" +
                    "\1\4\5\0\13\4\1\170\14\4\1\0\3\4\1\53" +
                    "\4\0\1\4\5\0\30\4\1\0\4\4\4\0\1\4" +
                    "\5\0\4\4\1\171\23\4\1\0\4\4\4\0\1\4" +
                    "\5\0\4\4\1\172\23\4\1\0\3\4\1\147\4\0" +
                    "\1\4\5\0\11\4\1\173\16\4\1\0\1\115\1\0" +
                    "\1\116\44\0\1\115\46\0\1\117\1\0\1\40\1\37" +
                    "\4\0\1\37\36\0\2\120\1\41\1\120\2\0\1\174" +
                    "\1\175\1\120\5\0\30\120\1\0\3\4\1\53\4\0" +
                    "\1\4\5\0\11\4\1\176\16\4\1\0\4\4\4\0" +
                    "\1\4\5\0\3\4\1\134\24\4\1\0\3\4\1\177" +
                    "\4\0\1\4\5\0\30\4\1\0\3\4\1\200\4\0" +
                    "\1\4\5\0\30\4\1\0\4\4\4\0\1\4\5\0" +
                    "\3\4\1\62\24\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\201\23\4\1\0\4\4\4\0\1\4\5\0" +
                    "\1\134\27\4\1\0\3\4\1\202\4\0\1\4\5\0" +
                    "\30\4\1\0\4\4\4\0\1\4\5\0\1\203\27\4" +
                    "\1\0\4\4\4\0\1\4\5\0\11\4\1\147\16\4" +
                    "\1\0\4\4\4\0\1\4\5\0\14\4\1\53\13\4" +
                    "\1\0\3\4\1\204\4\0\1\4\5\0\30\4\1\0" +
                    "\4\4\4\0\1\4\5\0\20\4\1\205\7\4\1\0" +
                    "\4\4\4\0\1\4\5\0\2\4\1\206\25\4\1\0" +
                    "\4\4\4\0\1\4\5\0\1\207\27\4\1\0\3\4" +
                    "\1\210\4\0\1\4\5\0\30\4\1\0\4\4\4\0" +
                    "\1\4\5\0\20\4\1\211\7\4\1\0\4\4\4\0" +
                    "\1\4\5\0\15\4\1\111\12\4\1\0\4\4\4\0" +
                    "\1\4\5\0\21\4\1\212\6\4\1\0\4\4\4\0" +
                    "\1\4\5\0\24\4\1\53\3\4\1\0\4\4\4\0" +
                    "\1\4\5\0\15\4\1\213\12\4\1\0\4\4\4\0" +
                    "\1\4\5\0\13\4\1\53\14\4\1\0\4\4\4\0" +
                    "\1\4\5\0\1\214\27\4\1\0\3\4\1\215\4\0" +
                    "\1\4\5\0\30\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\216\23\4\1\0\4\4\4\0\1\4\5\0" +
                    "\5\4\1\217\22\4\1\0\4\4\4\0\1\4\5\0" +
                    "\24\4\1\220\3\4\1\0\4\4\4\0\1\4\5\0" +
                    "\15\4\1\221\12\4\1\0\4\4\4\0\1\4\5\0" +
                    "\4\4\1\222\1\4\1\223\20\4\1\151\1\0\4\4" +
                    "\4\0\1\4\5\0\25\4\1\224\2\4\1\0\4\4" +
                    "\4\0\1\4\5\0\7\4\1\53\20\4\1\0\4\4" +
                    "\4\0\1\4\5\0\11\4\1\225\16\4\1\0\4\4" +
                    "\4\0\1\4\5\0\10\4\1\226\17\4\1\0\4\4" +
                    "\4\0\1\4\5\0\1\134\3\4\1\227\23\4\1\0" +
                    "\4\4\4\0\1\4\5\0\11\4\1\230\16\4\1\0" +
                    "\4\4\4\0\1\4\5\0\10\4\1\53\17\4\1\0" +
                    "\3\4\1\231\4\0\1\4\5\0\30\4\1\0\4\4" +
                    "\4\0\1\4\5\0\2\4\1\53\25\4\1\0\4\4" +
                    "\4\0\1\4\5\0\6\4\1\232\21\4\1\0\4\4" +
                    "\4\0\1\4\5\0\11\4\1\165\16\4\1\0\4\4" +
                    "\4\0\1\4\5\0\23\4\1\53\4\4\1\0\4\4" +
                    "\4\0\1\4\5\0\10\4\1\111\17\4\1\0\2\233" +
                    "\1\0\1\233\4\0\1\233\5\0\30\233\4\0\1\37" +
                    "\4\0\1\37\36\0\4\4\4\0\1\4\5\0\16\4" +
                    "\1\53\11\4\1\0\4\4\4\0\1\4\5\0\3\4" +
                    "\1\234\7\4\1\235\14\4\1\0\4\4\4\0\1\4" +
                    "\5\0\7\4\1\232\20\4\1\0\4\4\4\0\1\4" +
                    "\5\0\3\4\1\236\24\4\1\0\4\4\4\0\1\4" +
                    "\5\0\5\4\1\237\1\4\1\62\20\4\1\0\4\4" +
                    "\4\0\1\4\5\0\5\4\1\213\22\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\237\24\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\147\24\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\56\24\4\1\0\4\4" +
                    "\4\0\1\4\5\0\21\4\1\240\6\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\73\24\4\1\0\3\4" +
                    "\1\241\4\0\1\4\5\0\30\4\1\0\4\4\4\0" +
                    "\1\4\5\0\11\4\1\242\16\4\1\0\3\4\1\56" +
                    "\4\0\1\4\5\0\30\4\1\0\4\4\4\0\1\4" +
                    "\5\0\3\4\1\224\24\4\1\0\4\4\4\0\1\4" +
                    "\5\0\6\4\1\62\21\4\1\0\4\4\4\0\1\4" +
                    "\5\0\14\4\1\67\13\4\1\0\4\4\4\0\1\4" +
                    "\5\0\4\4\1\243\23\4\1\0\4\4\4\0\1\4" +
                    "\5\0\1\143\27\4\1\0\4\4\4\0\1\4\5\0" +
                    "\21\4\1\227\6\4\1\0\3\4\1\244\4\0\1\4" +
                    "\5\0\30\4\1\0\3\4\1\245\4\0\1\4\5\0" +
                    "\30\4\1\0\4\4\4\0\1\4\5\0\1\246\27\4" +
                    "\1\0\4\4\4\0\1\4\5\0\4\4\1\213\23\4" +
                    "\1\0\4\4\4\0\1\4\5\0\1\247\27\4\1\0" +
                    "\4\4\4\0\1\4\5\0\1\53\27\4\1\0\4\4" +
                    "\4\0\1\4\5\0\4\4\1\237\23\4\1\0\4\4" +
                    "\4\0\1\4\5\0\3\4\1\250\24\4\1\0\4\4" +
                    "\4\0\1\4\5\0\4\4\1\251\23\4\1\0\2\233" +
                    "\1\174\1\233\3\0\1\175\1\233\5\0\30\233\1\0" +
                    "\4\4\4\0\1\4\5\0\13\4\1\252\14\4\1\0" +
                    "\4\4\4\0\1\4\5\0\12\4\1\237\15\4\1\0" +
                    "\4\4\4\0\1\4\5\0\1\215\27\4\1\0\4\4" +
                    "\4\0\1\4\5\0\5\4\1\53\22\4\1\0\3\4" +
                    "\1\237\4\0\1\4\5\0\30\4\1\0\4\4\4\0" +
                    "\1\4\5\0\20\4\1\111\7\4\1\0\4\4\4\0" +
                    "\1\4\5\0\13\4\1\224\14\4\1\0\4\4\4\0" +
                    "\1\4\5\0\1\253\27\4\1\0\4\4\4\0\1\4" +
                    "\5\0\6\4\1\225\21\4\1\0\4\4\4\0\1\4" +
                    "\5\0\12\4\1\254\15\4\1\0\4\4\4\0\1\4" +
                    "\5\0\4\4\1\111\23\4\1\0\4\4\4\0\1\4" +
                    "\5\0\3\4\1\111\24\4\1\0\4\4\4\0\1\4" +
                    "\5\0\11\4\1\255\16\4\1\0\4\4\4\0\1\4" +
                    "\5\0\11\4\1\256\16\4\1\0\4\4\4\0\1\4" +
                    "\5\0\1\165\27\4\1\0\4\4\4\0\1\4\5\0" +
                    "\13\4\1\62\14\4\1\0\4\4\4\0\1\4\5\0" +
                    "\20\4\1\247\7\4\1\0\4\4\4\0\1\4\5\0" +
                    "\6\4\1\53\21\4\1\0\4\4\4\0\1\4\5\0" +
                    "\2\4\1\147\25\4";
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\4\1\1\11\26\1\4\0\4\1\1\0" +
                    "\1\1\1\0\45\1\1\0\1\1\1\0\4\1\1\11" +
                    "\46\1\1\0\36\1\1\0\23\1";
    private static java.io.Reader zzReader = null; // Fake
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    GprLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    GprLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[174];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[174];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[6630];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[174];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 108) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 8: {
                    return AdaTypes.KEYWORD;
                }
                case 10:
                    break;
                case 3: {
                    return AdaTypes.IDENTIFIER;
                }
                case 11:
                    break;
                case 5: {
                    yybegin(YYINITIAL);
                    return TokenType.WHITE_SPACE;
                }
                case 12:
                    break;
                case 6: {
                    return AdaTypes.COMMENT;
                }
                case 13:
                    break;
                case 1: {
                    return AdaTypes.OTHER;
                }
                case 14:
                    break;
                case 2: {
                    return AdaTypes.NUMERIC_LITERAL;
                }
                case 15:
                    break;
                case 4: {
                    yybegin(YYINITIAL);
                    return AdaTypes.CRLF;
                }
                case 16:
                    break;
                case 7: {
                    return AdaTypes.STRING_LITERAL;
                }
                case 17:
                    break;
                case 9: {
                    return AdaTypes.CHARACTER_LITERAL;
                }
                case 18:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
