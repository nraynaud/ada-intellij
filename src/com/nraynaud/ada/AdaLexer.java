/* The following code was generated by JFlex 1.4.3 on 06/10/14 23:27 */

package com.nraynaud.ada;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.nraynaud.ada.psi.AdaTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/14 23:27 from the specification file
 * <tt>/Users/nraynaud/dev/adaplugin/src/com/nraynaud/ada/Ada.flex</tt>
 */
class AdaLexer implements FlexLexer {
  /** lexical states */
  public static final int YYINITIAL = 0;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };
  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\14\1\12\1\0\1\14\1\13\22\0\1\14\1\0\1\15" +
                  "\1\10\3\0\1\16\3\0\1\5\1\0\1\6\1\7\1\0\12\1" +
                  "\7\0\4\2\1\11\25\2\4\0\1\3\1\0\1\17\1\20\1\25" +
                  "\1\31\1\4\1\35\1\34\1\42\1\30\1\2\1\43\1\27\1\40" +
                  "\1\32\1\21\1\26\1\45\1\22\1\24\1\23\1\37\1\44\1\41" +
                  "\1\36\1\33\1\2\uff85\0";
  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\2\3\1\1\2\4\1\5\2\1" +
                  "\22\3\4\0\3\3\1\6\1\0\1\7\1\0\2\3" +
                  "\1\10\41\3\1\2\1\0\1\2\1\0\3\3\1\11" +
                  "\1\3\1\10\44\3\1\0\1\2\34\3\1\0\20\3";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\46\0\114\0\162\0\230\0\276\0\46\0\344" +
                    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214" +
                    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344" +
                    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474" +
                    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0130\0\u0558\0\u057e" +
                    "\0\u05a4\0\u05ca\0\162\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688" +
                    "\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8" +
                    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8" +
                    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18" +
                    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48" +
                    "\0\u0b6e\0\u0b94\0\u0bba\0\46\0\u0be0\0\u0c06\0\u0c2c\0\u0c52" +
                    "\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82" +
                    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2" +
                    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2" +
                    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112" +
                    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242" +
                    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372" +
                    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2" +
                    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2" +
                    "\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702" +
                    "\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832"+
    "\0\u1858";
  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();
  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\2\2" +
                  "\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                  "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                  "\1\26\1\27\1\4\1\30\1\31\1\32\1\33\1\34" +
                  "\1\35\4\4\47\0\1\3\1\0\1\36\1\37\2\0" +
                  "\1\40\1\41\1\37\35\0\4\4\4\0\1\4\5\0" +
                  "\27\4\1\0\4\4\4\0\1\4\5\0\10\4\1\42" +
                  "\2\4\1\43\3\4\1\44\7\4\6\0\1\45\51\0" +
                  "\1\7\47\0\1\11\31\0\15\46\1\47\30\46\12\50" +
                  "\1\0\33\50\1\0\4\4\4\0\1\4\5\0\1\4" +
                  "\1\51\1\4\1\52\1\53\1\4\1\54\1\4\1\55" +
                  "\2\4\1\56\13\4\1\0\3\4\1\57\4\0\1\4" +
                  "\5\0\2\4\1\60\24\4\1\0\4\4\4\0\1\4" +
                  "\5\0\3\4\1\53\1\61\11\4\1\53\1\4\1\62" +
                  "\6\4\1\0\3\4\1\63\4\0\1\4\5\0\1\64" +
                  "\26\4\1\0\3\4\1\65\4\0\1\4\5\0\1\66" +
                  "\13\4\1\67\6\4\1\70\3\4\1\0\3\4\1\71" +
                  "\4\0\1\4\5\0\20\4\1\72\6\4\1\0\4\4" +
                  "\4\0\1\4\5\0\1\73\1\4\1\74\24\4\1\0" +
                  "\4\4\4\0\1\4\5\0\1\75\2\4\1\76\23\4" +
                  "\1\0\4\4\4\0\1\4\5\0\2\4\1\77\6\4" +
                  "\1\100\15\4\1\0\4\4\4\0\1\4\5\0\5\4" +
                  "\1\53\5\4\1\53\2\4\1\53\10\4\1\0\3\4" +
                  "\1\101\4\0\1\4\5\0\2\4\1\53\6\4\1\102" +
                  "\15\4\1\0\3\4\1\103\4\0\1\4\5\0\2\4" +
                  "\1\62\15\4\1\104\6\4\1\0\3\4\1\105\4\0" +
                  "\1\4\5\0\2\4\1\106\24\4\1\0\4\4\4\0" +
                  "\1\4\5\0\2\4\1\107\15\4\1\110\6\4\1\0" +
                  "\4\4\4\0\1\4\5\0\2\4\1\107\24\4\1\0" +
                  "\4\4\4\0\1\4\5\0\5\4\1\111\5\4\1\112" +
                  "\13\4\1\0\4\4\4\0\1\4\5\0\2\4\1\56" +
                  "\24\4\1\0\4\4\4\0\1\4\5\0\11\4\1\113" +
                  "\11\4\1\114\3\4\1\0\1\3\45\0\1\115\3\0" +
                  "\2\116\40\0\1\117\45\0\2\120\1\0\1\120\4\0" +
                  "\1\120\5\0\27\120\1\0\4\4\4\0\1\4\5\0" +
                  "\5\4\1\121\21\4\1\0\4\4\4\0\1\4\5\0" +
                  "\4\4\1\122\5\4\1\53\14\4\1\0\4\4\4\0" +
                  "\1\4\5\0\6\4\1\123\2\4\1\62\15\4\12\45" +
                  "\2\0\32\45\15\0\1\46\46\0\1\124\30\0\4\4" +
                  "\4\0\1\4\5\0\2\4\1\125\2\4\1\126\21\4" +
                  "\1\0\4\4\4\0\1\4\5\0\3\4\1\127\23\4" +
                  "\1\0\4\4\4\0\1\4\5\0\6\4\1\130\20\4" +
                  "\1\0\4\4\4\0\1\4\5\0\10\4\1\53\1\131" +
                  "\15\4\1\0\4\4\4\0\1\4\5\0\12\4\1\53" +
                  "\14\4\1\0\4\4\4\0\1\4\5\0\15\4\1\132" +
                  "\11\4\1\0\4\4\4\0\1\4\5\0\12\4\1\133" +
                  "\14\4\1\0\4\4\4\0\1\4\5\0\23\4\1\134" +
                  "\3\4\1\0\4\4\4\0\1\4\5\0\4\4\1\53" +
                  "\22\4\1\0\4\4\4\0\1\4\5\0\4\4\1\135" +
                  "\1\4\1\136\4\4\1\137\5\4\1\53\3\4\1\140" +
                  "\1\141\1\0\4\4\4\0\1\4\5\0\11\4\1\73" +
                  "\1\4\1\142\13\4\1\0\4\4\4\0\1\4\5\0" +
                  "\3\4\1\143\23\4\1\0\4\4\4\0\1\4\5\0" +
                  "\5\4\1\144\7\4\1\145\11\4\1\0\4\4\4\0" +
                  "\1\4\5\0\7\4\1\111\17\4\1\0\3\4\1\146" +
                  "\4\0\1\4\5\0\27\4\1\0\4\4\4\0\1\4" +
                  "\5\0\7\4\1\147\1\150\16\4\1\0\4\4\4\0" +
                  "\1\4\5\0\1\4\1\151\25\4\1\0\4\4\4\0" +
                  "\1\4\5\0\5\4\1\111\21\4\1\0\4\4\4\0" +
                  "\1\4\5\0\13\4\1\152\13\4\1\0\4\4\4\0" +
                  "\1\4\5\0\6\4\1\153\20\4\1\0\4\4\4\0" +
                  "\1\4\5\0\1\154\1\4\1\155\6\4\1\156\15\4" +
                  "\1\0\4\4\4\0\1\4\5\0\2\4\1\157\24\4" +
                  "\1\0\4\4\4\0\1\4\5\0\21\4\1\160\5\4" +
                  "\1\0\4\4\4\0\1\4\5\0\6\4\1\161\1\4" +
                  "\1\162\16\4\1\0\4\4\4\0\1\4\5\0\15\4" +
                  "\1\163\11\4\1\0\4\4\4\0\1\4\5\0\22\4" +
                  "\1\53\4\4\1\0\4\4\4\0\1\4\5\0\10\4" +
                  "\1\164\16\4\1\0\4\4\4\0\1\4\5\0\13\4" +
                  "\1\165\13\4\1\0\4\4\4\0\1\4\5\0\4\4" +
                  "\1\166\22\4\1\0\4\4\4\0\1\4\5\0\3\4" +
                  "\1\53\23\4\1\0\4\4\4\0\1\4\5\0\13\4" +
                  "\1\167\13\4\1\0\3\4\1\53\4\0\1\4\5\0" +
                  "\27\4\1\0\4\4\4\0\1\4\5\0\4\4\1\170" +
                  "\22\4\1\0\4\4\4\0\1\4\5\0\4\4\1\171" +
                  "\22\4\1\0\3\4\1\146\4\0\1\4\5\0\11\4" +
                  "\1\172\15\4\1\0\1\115\1\0\1\116\43\0\1\115" +
                  "\45\0\1\117\1\0\1\40\1\37\4\0\1\37\35\0" +
                  "\2\120\1\41\1\120\2\0\1\173\1\174\1\120\5\0" +
                  "\27\120\1\0\3\4\1\53\4\0\1\4\5\0\11\4" +
                  "\1\175\15\4\1\0\4\4\4\0\1\4\5\0\3\4" +
                  "\1\133\23\4\1\0\3\4\1\176\4\0\1\4\5\0" +
                  "\27\4\1\0\4\4\4\0\1\4\5\0\3\4\1\62" +
                  "\23\4\1\0\4\4\4\0\1\4\5\0\4\4\1\177" +
                  "\22\4\1\0\4\4\4\0\1\4\5\0\1\133\26\4" +
                  "\1\0\3\4\1\200\4\0\1\4\5\0\27\4\1\0" +
                  "\4\4\4\0\1\4\5\0\1\201\26\4\1\0\4\4" +
                  "\4\0\1\4\5\0\11\4\1\146\15\4\1\0\4\4" +
                  "\4\0\1\4\5\0\14\4\1\53\12\4\1\0\3\4" +
                  "\1\202\4\0\1\4\5\0\27\4\1\0\4\4\4\0" +
                  "\1\4\5\0\20\4\1\203\6\4\1\0\4\4\4\0" +
                  "\1\4\5\0\2\4\1\204\24\4\1\0\4\4\4\0" +
                  "\1\4\5\0\1\205\26\4\1\0\3\4\1\206\4\0" +
                  "\1\4\5\0\27\4\1\0\4\4\4\0\1\4\5\0" +
                  "\20\4\1\207\6\4\1\0\4\4\4\0\1\4\5\0" +
                  "\15\4\1\111\11\4\1\0\4\4\4\0\1\4\5\0" +
                  "\21\4\1\210\5\4\1\0\4\4\4\0\1\4\5\0" +
                  "\24\4\1\53\2\4\1\0\4\4\4\0\1\4\5\0" +
                  "\15\4\1\211\11\4\1\0\4\4\4\0\1\4\5\0" +
                  "\13\4\1\53\13\4\1\0\4\4\4\0\1\4\5\0" +
                  "\1\212\26\4\1\0\3\4\1\213\4\0\1\4\5\0" +
                  "\27\4\1\0\4\4\4\0\1\4\5\0\4\4\1\214" +
                  "\22\4\1\0\4\4\4\0\1\4\5\0\5\4\1\215" +
                  "\21\4\1\0\4\4\4\0\1\4\5\0\24\4\1\216" +
                  "\2\4\1\0\4\4\4\0\1\4\5\0\15\4\1\217" +
                  "\11\4\1\0\4\4\4\0\1\4\5\0\4\4\1\220" +
                  "\1\4\1\221\20\4\1\0\4\4\4\0\1\4\5\0" +
                  "\25\4\1\222\1\4\1\0\4\4\4\0\1\4\5\0" +
                  "\7\4\1\53\17\4\1\0\4\4\4\0\1\4\5\0" +
                  "\11\4\1\223\15\4\1\0\4\4\4\0\1\4\5\0" +
                  "\10\4\1\224\16\4\1\0\4\4\4\0\1\4\5\0" +
                  "\1\133\3\4\1\225\22\4\1\0\4\4\4\0\1\4" +
                  "\5\0\11\4\1\226\15\4\1\0\4\4\4\0\1\4" +
                  "\5\0\10\4\1\53\16\4\1\0\3\4\1\227\4\0" +
                  "\1\4\5\0\27\4\1\0\4\4\4\0\1\4\5\0" +
                  "\2\4\1\53\24\4\1\0\4\4\4\0\1\4\5\0" +
                  "\6\4\1\230\20\4\1\0\4\4\4\0\1\4\5\0" +
                  "\11\4\1\164\15\4\1\0\4\4\4\0\1\4\5\0" +
                  "\23\4\1\53\3\4\1\0\4\4\4\0\1\4\5\0" +
                  "\10\4\1\111\16\4\1\0\2\231\1\0\1\231\4\0" +
                  "\1\231\5\0\27\231\4\0\1\37\4\0\1\37\35\0" +
                  "\4\4\4\0\1\4\5\0\16\4\1\53\10\4\1\0" +
                  "\4\4\4\0\1\4\5\0\7\4\1\230\17\4\1\0" +
                  "\4\4\4\0\1\4\5\0\3\4\1\232\23\4\1\0" +
                  "\4\4\4\0\1\4\5\0\5\4\1\233\1\4\1\62" +
                  "\17\4\1\0\4\4\4\0\1\4\5\0\5\4\1\211" +
                  "\21\4\1\0\4\4\4\0\1\4\5\0\3\4\1\233" +
                  "\23\4\1\0\4\4\4\0\1\4\5\0\3\4\1\146" +
                  "\23\4\1\0\4\4\4\0\1\4\5\0\3\4\1\56" +
                  "\23\4\1\0\4\4\4\0\1\4\5\0\21\4\1\234" +
                  "\5\4\1\0\4\4\4\0\1\4\5\0\3\4\1\73" +
                  "\23\4\1\0\3\4\1\235\4\0\1\4\5\0\27\4" +
                  "\1\0\4\4\4\0\1\4\5\0\11\4\1\236\15\4" +
                  "\1\0\3\4\1\56\4\0\1\4\5\0\27\4\1\0" +
                  "\4\4\4\0\1\4\5\0\3\4\1\222\23\4\1\0" +
                  "\4\4\4\0\1\4\5\0\6\4\1\62\20\4\1\0" +
                  "\4\4\4\0\1\4\5\0\14\4\1\67\12\4\1\0" +
                  "\4\4\4\0\1\4\5\0\4\4\1\237\22\4\1\0" +
                  "\4\4\4\0\1\4\5\0\1\142\26\4\1\0\4\4" +
                  "\4\0\1\4\5\0\21\4\1\225\5\4\1\0\3\4" +
                  "\1\240\4\0\1\4\5\0\27\4\1\0\3\4\1\241" +
                  "\4\0\1\4\5\0\27\4\1\0\4\4\4\0\1\4" +
                  "\5\0\1\242\26\4\1\0\4\4\4\0\1\4\5\0" +
                  "\4\4\1\211\22\4\1\0\4\4\4\0\1\4\5\0" +
                  "\1\243\26\4\1\0\4\4\4\0\1\4\5\0\1\53" +
                  "\26\4\1\0\4\4\4\0\1\4\5\0\4\4\1\233" +
                  "\22\4\1\0\4\4\4\0\1\4\5\0\3\4\1\244" +
                  "\23\4\1\0\4\4\4\0\1\4\5\0\4\4\1\245" +
                  "\22\4\1\0\2\231\1\173\1\231\3\0\1\174\1\231" +
                  "\5\0\27\231\1\0\4\4\4\0\1\4\5\0\1\213" +
                  "\26\4\1\0\4\4\4\0\1\4\5\0\5\4\1\53" +
                  "\21\4\1\0\3\4\1\233\4\0\1\4\5\0\27\4" +
                  "\1\0\4\4\4\0\1\4\5\0\20\4\1\111\6\4" +
                  "\1\0\4\4\4\0\1\4\5\0\13\4\1\222\13\4" +
                  "\1\0\4\4\4\0\1\4\5\0\1\246\26\4\1\0" +
                  "\4\4\4\0\1\4\5\0\6\4\1\223\20\4\1\0" +
                  "\4\4\4\0\1\4\5\0\12\4\1\247\14\4\1\0" +
                  "\4\4\4\0\1\4\5\0\4\4\1\111\22\4\1\0" +
                  "\4\4\4\0\1\4\5\0\3\4\1\111\23\4\1\0" +
                  "\4\4\4\0\1\4\5\0\11\4\1\250\15\4\1\0" +
                  "\4\4\4\0\1\4\5\0\11\4\1\251\15\4\1\0" +
                  "\4\4\4\0\1\4\5\0\13\4\1\62\13\4\1\0" +
                  "\4\4\4\0\1\4\5\0\20\4\1\243\6\4\1\0" +
                  "\4\4\4\0\1\4\5\0\6\4\1\53\20\4\1\0" +
                  "\4\4\4\0\1\4\5\0\2\4\1\146\24\4";
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\4\1\1\11\26\1\4\0\4\1\1\0" +
                  "\1\1\1\0\45\1\1\0\1\1\1\0\3\1\1\11" +
                  "\46\1\1\0\35\1\1\0\20\1";
    private static java.io.Reader zzReader = null; // Fake
  /** the current state of the DFA */
  private int zzState;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    AdaLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    AdaLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[169];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[169];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[6270];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
        int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
        int value = packed.charAt(i++);
        value--;
        do result[j++] = value; while (--count > 0);
    }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[169];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
    }

    /**
     * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
     * @return the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
      char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
                zzMarkedPosL = zzCurrentPosL;
                if ((zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

        // store back cached position
        zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 8: {
              return AdaTypes.KEYWORD;
          }
          case 10:
              break;
          case 3: {
              return AdaTypes.IDENTIFIER;
          }
          case 11:
              break;
          case 5: {
              yybegin(YYINITIAL);
              return TokenType.WHITE_SPACE;
          }
          case 12:
              break;
          case 6:
          { return AdaTypes.COMMENT;
          }
          case 13:
              break;
          case 1:
          { return AdaTypes.OTHER;
          }
        case 14: break;
        case 2: 
          { return AdaTypes.NUMERIC_LITERAL;
          }
          case 15:
              break;
          case 4: {
              yybegin(YYINITIAL);
              return AdaTypes.CRLF;
          }
          case 16:
              break;
          case 7: {
              return AdaTypes.STRING_LITERAL;
          }
        case 17: break;
        case 9: 
          { return AdaTypes.CHARACTER_LITERAL;
          }
        case 18: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
