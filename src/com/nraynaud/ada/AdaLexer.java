/* The following code was generated by JFlex 1.4.3 on 06/10/14 21:45 */

package com.nraynaud.ada;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.nraynaud.ada.psi.AdaTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/14 21:45 from the specification file
 * <tt>/Users/nraynaud/dev/adaplugin/src/com/nraynaud/ada/Ada.flex</tt>
 */
class AdaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\6\22\0\1\7\2\0\1\0"+
    "\7\0\1\0\1\0\1\4\1\0\1\0\12\1\1\0\2\0\1\0"+
    "\3\0\4\2\1\2\25\2\1\0\1\0\2\0\1\1\1\0\1\10"+
    "\1\11\1\16\1\22\1\3\1\26\1\25\1\33\1\21\1\2\1\34"+
    "\1\20\1\31\1\23\1\12\1\17\1\36\1\13\1\15\1\14\1\30"+
    "\1\35\1\32\1\27\1\24\1\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\2\3\1\4\25\2\1\5"+
    "\2\2\1\6\45\2\1\6\120\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\37\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa"+
    "\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2"+
    "\0\76\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0573"+
    "\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b"+
    "\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763"+
    "\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b"+
    "\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b"+
    "\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43"+
    "\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b"+
    "\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33"+
    "\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b"+
    "\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23"+
    "\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b"+
    "\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4\0\u1113"+
    "\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\3\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\4\3\40\0\3\3\4\0\27\3\1\0"+
    "\3\3\4\0\10\3\1\33\2\3\1\34\3\3\1\35"+
    "\7\3\4\0\1\36\37\0\1\6\40\0\1\10\30\0"+
    "\3\3\4\0\1\3\1\37\1\3\1\40\1\41\1\3"+
    "\1\42\1\3\1\43\2\3\1\44\13\3\1\0\2\3"+
    "\1\45\4\0\2\3\1\46\24\3\1\0\3\3\4\0"+
    "\3\3\1\41\1\47\11\3\1\41\1\3\1\50\6\3"+
    "\1\0\2\3\1\51\4\0\1\52\26\3\1\0\2\3"+
    "\1\53\4\0\1\54\13\3\1\55\6\3\1\56\3\3"+
    "\1\0\2\3\1\57\4\0\20\3\1\60\6\3\1\0"+
    "\3\3\4\0\1\61\1\3\1\62\24\3\1\0\3\3"+
    "\4\0\1\63\2\3\1\64\23\3\1\0\3\3\4\0"+
    "\2\3\1\65\6\3\1\66\15\3\1\0\3\3\4\0"+
    "\5\3\1\41\5\3\1\41\2\3\1\41\10\3\1\0"+
    "\2\3\1\67\4\0\2\3\1\41\6\3\1\70\15\3"+
    "\1\0\2\3\1\71\4\0\2\3\1\50\15\3\1\72"+
    "\6\3\1\0\2\3\1\73\4\0\2\3\1\74\24\3"+
    "\1\0\3\3\4\0\2\3\1\75\15\3\1\76\6\3"+
    "\1\0\3\3\4\0\2\3\1\75\24\3\1\0\3\3"+
    "\4\0\5\3\1\77\5\3\1\100\13\3\1\0\3\3"+
    "\4\0\2\3\1\44\24\3\1\0\3\3\4\0\11\3"+
    "\1\101\11\3\1\102\3\3\1\0\3\3\4\0\5\3"+
    "\1\103\21\3\1\0\3\3\4\0\4\3\1\104\5\3"+
    "\1\41\14\3\1\0\3\3\4\0\6\3\1\105\2\3"+
    "\1\50\15\3\5\36\2\0\30\36\1\0\3\3\4\0"+
    "\2\3\1\106\2\3\1\107\21\3\1\0\3\3\4\0"+
    "\3\3\1\110\23\3\1\0\3\3\4\0\6\3\1\111"+
    "\20\3\1\0\3\3\4\0\10\3\1\41\1\112\15\3"+
    "\1\0\3\3\4\0\12\3\1\41\14\3\1\0\3\3"+
    "\4\0\15\3\1\113\11\3\1\0\3\3\4\0\12\3"+
    "\1\114\14\3\1\0\3\3\4\0\23\3\1\115\3\3"+
    "\1\0\3\3\4\0\4\3\1\41\22\3\1\0\3\3"+
    "\4\0\4\3\1\116\1\3\1\117\4\3\1\120\5\3"+
    "\1\41\3\3\1\121\1\122\1\0\3\3\4\0\11\3"+
    "\1\61\1\3\1\123\13\3\1\0\3\3\4\0\3\3"+
    "\1\124\23\3\1\0\3\3\4\0\5\3\1\125\7\3"+
    "\1\126\11\3\1\0\3\3\4\0\7\3\1\77\17\3"+
    "\1\0\2\3\1\127\4\0\27\3\1\0\3\3\4\0"+
    "\7\3\1\130\1\131\16\3\1\0\3\3\4\0\1\3"+
    "\1\132\25\3\1\0\3\3\4\0\5\3\1\77\21\3"+
    "\1\0\3\3\4\0\13\3\1\133\13\3\1\0\3\3"+
    "\4\0\6\3\1\134\20\3\1\0\3\3\4\0\1\135"+
    "\1\3\1\136\6\3\1\137\15\3\1\0\3\3\4\0"+
    "\2\3\1\140\24\3\1\0\3\3\4\0\21\3\1\141"+
    "\5\3\1\0\3\3\4\0\6\3\1\142\1\3\1\143"+
    "\16\3\1\0\3\3\4\0\15\3\1\144\11\3\1\0"+
    "\3\3\4\0\22\3\1\41\4\3\1\0\3\3\4\0"+
    "\10\3\1\145\16\3\1\0\3\3\4\0\13\3\1\146"+
    "\13\3\1\0\3\3\4\0\4\3\1\147\22\3\1\0"+
    "\3\3\4\0\3\3\1\41\23\3\1\0\3\3\4\0"+
    "\13\3\1\150\13\3\1\0\2\3\1\41\4\0\27\3"+
    "\1\0\3\3\4\0\4\3\1\151\22\3\1\0\3\3"+
    "\4\0\4\3\1\152\22\3\1\0\2\3\1\127\4\0"+
    "\11\3\1\153\15\3\1\0\2\3\1\41\4\0\11\3"+
    "\1\154\15\3\1\0\3\3\4\0\3\3\1\114\23\3"+
    "\1\0\2\3\1\155\4\0\27\3\1\0\3\3\4\0"+
    "\3\3\1\50\23\3\1\0\3\3\4\0\4\3\1\156"+
    "\22\3\1\0\3\3\4\0\1\114\26\3\1\0\2\3"+
    "\1\157\4\0\27\3\1\0\3\3\4\0\1\160\26\3"+
    "\1\0\3\3\4\0\11\3\1\127\15\3\1\0\3\3"+
    "\4\0\14\3\1\41\12\3\1\0\2\3\1\161\4\0"+
    "\27\3\1\0\3\3\4\0\20\3\1\162\6\3\1\0"+
    "\3\3\4\0\2\3\1\163\24\3\1\0\3\3\4\0"+
    "\1\164\26\3\1\0\2\3\1\165\4\0\27\3\1\0"+
    "\3\3\4\0\20\3\1\166\6\3\1\0\3\3\4\0"+
    "\15\3\1\77\11\3\1\0\3\3\4\0\21\3\1\167"+
    "\5\3\1\0\3\3\4\0\24\3\1\41\2\3\1\0"+
    "\3\3\4\0\15\3\1\170\11\3\1\0\3\3\4\0"+
    "\13\3\1\41\13\3\1\0\3\3\4\0\1\171\26\3"+
    "\1\0\2\3\1\172\4\0\27\3\1\0\3\3\4\0"+
    "\4\3\1\173\22\3\1\0\3\3\4\0\5\3\1\174"+
    "\21\3\1\0\3\3\4\0\24\3\1\175\2\3\1\0"+
    "\3\3\4\0\15\3\1\176\11\3\1\0\3\3\4\0"+
    "\4\3\1\177\1\3\1\200\20\3\1\0\3\3\4\0"+
    "\25\3\1\201\1\3\1\0\3\3\4\0\7\3\1\41"+
    "\17\3\1\0\3\3\4\0\11\3\1\202\15\3\1\0"+
    "\3\3\4\0\10\3\1\203\16\3\1\0\3\3\4\0"+
    "\1\114\3\3\1\204\22\3\1\0\3\3\4\0\11\3"+
    "\1\205\15\3\1\0\3\3\4\0\10\3\1\41\16\3"+
    "\1\0\2\3\1\206\4\0\27\3\1\0\3\3\4\0"+
    "\2\3\1\41\24\3\1\0\3\3\4\0\6\3\1\207"+
    "\20\3\1\0\3\3\4\0\11\3\1\145\15\3\1\0"+
    "\3\3\4\0\23\3\1\41\3\3\1\0\3\3\4\0"+
    "\10\3\1\77\16\3\1\0\3\3\4\0\16\3\1\41"+
    "\10\3\1\0\3\3\4\0\7\3\1\207\17\3\1\0"+
    "\3\3\4\0\3\3\1\210\23\3\1\0\3\3\4\0"+
    "\5\3\1\211\1\3\1\50\17\3\1\0\3\3\4\0"+
    "\5\3\1\170\21\3\1\0\3\3\4\0\3\3\1\211"+
    "\23\3\1\0\3\3\4\0\3\3\1\127\23\3\1\0"+
    "\3\3\4\0\3\3\1\44\23\3\1\0\3\3\4\0"+
    "\21\3\1\212\5\3\1\0\3\3\4\0\3\3\1\61"+
    "\23\3\1\0\2\3\1\213\4\0\27\3\1\0\3\3"+
    "\4\0\11\3\1\214\15\3\1\0\2\3\1\44\4\0"+
    "\27\3\1\0\3\3\4\0\3\3\1\201\23\3\1\0"+
    "\3\3\4\0\6\3\1\50\20\3\1\0\3\3\4\0"+
    "\14\3\1\55\12\3\1\0\3\3\4\0\4\3\1\215"+
    "\22\3\1\0\3\3\4\0\1\123\26\3\1\0\3\3"+
    "\4\0\21\3\1\204\5\3\1\0\2\3\1\216\4\0"+
    "\27\3\1\0\2\3\1\217\4\0\27\3\1\0\3\3"+
    "\4\0\1\220\26\3\1\0\3\3\4\0\4\3\1\170"+
    "\22\3\1\0\3\3\4\0\1\221\26\3\1\0\3\3"+
    "\4\0\1\41\26\3\1\0\3\3\4\0\4\3\1\211"+
    "\22\3\1\0\3\3\4\0\3\3\1\222\23\3\1\0"+
    "\3\3\4\0\4\3\1\223\22\3\1\0\3\3\4\0"+
    "\1\172\26\3\1\0\3\3\4\0\5\3\1\41\21\3"+
    "\1\0\2\3\1\211\4\0\27\3\1\0\3\3\4\0"+
    "\20\3\1\77\6\3\1\0\3\3\4\0\13\3\1\201"+
    "\13\3\1\0\3\3\4\0\1\224\26\3\1\0\3\3"+
    "\4\0\6\3\1\202\20\3\1\0\3\3\4\0\12\3"+
    "\1\225\14\3\1\0\3\3\4\0\4\3\1\77\22\3"+
    "\1\0\3\3\4\0\3\3\1\77\23\3\1\0\3\3"+
    "\4\0\11\3\1\226\15\3\1\0\3\3\4\0\11\3"+
    "\1\227\15\3\1\0\3\3\4\0\13\3\1\50\13\3"+
    "\1\0\3\3\4\0\20\3\1\221\6\3\1\0\3\3"+
    "\4\0\6\3\1\41\20\3\1\0\3\3\4\0\2\3"+
    "\1\127\24\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4619];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\221\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  AdaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AdaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return AdaTypes.OTHER;
          }
        case 7: break;
        case 2: 
          { return AdaTypes.IDENTIFIER;
          }
        case 8: break;
        case 5: 
          { return AdaTypes.COMMENT;
          }
        case 9: break;
        case 4: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 10: break;
        case 6: 
          { return AdaTypes.KEYWORD;
          }
        case 11: break;
        case 3: 
          { yybegin(YYINITIAL); return AdaTypes.CRLF;
          }
        case 12: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
