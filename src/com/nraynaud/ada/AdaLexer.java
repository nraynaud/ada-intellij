/* The following code was generated by JFlex 1.4.3 on 06/10/14 23:18 */

package com.nraynaud.ada;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.nraynaud.ada.psi.AdaTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/14 23:18 from the specification file
 * <tt>/Users/nraynaud/dev/adaplugin/src/com/nraynaud/ada/Ada.flex</tt>
 */
class AdaLexer implements FlexLexer {
  /** lexical states */
  public static final int YYINITIAL = 0;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };
  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\5\1\3\1\0\1\5\1\4\22\0\1\5\1\0\1\7" +
                  "\4\0\1\10\5\0\1\6\2\0\12\1\7\0\32\2\4\0\1\1" +
                  "\1\0\1\11\1\12\1\17\1\24\1\20\1\30\1\27\1\35\1\23" +
                  "\1\2\1\36\1\22\1\33\1\25\1\13\1\21\1\40\1\14\1\16" +
                  "\1\15\1\32\1\37\1\34\1\31\1\26\1\2\uff85\0";
  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\2\3\1\4\3\1\23\2\1\5" +
                  "\1\0\1\6\1\0\2\2\1\7\44\2\1\10\1\2"+
    "\1\7\123\2";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\41\0\102\0\41\0\143\0\204\0\245\0\306" +
                    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce" +
                    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6" +
                    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\306\0\u039c\0\u03bd" +
                    "\0\u03de\0\u03ff\0\102\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4" +
                    "\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac" +
                    "\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4" +
                    "\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc" +
                    "\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\41" +
                    "\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab" +
                    "\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3" +
                    "\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb" +
                    "\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3" +
                    "\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb" +
                    "\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3" +
                    "\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb" +
                    "\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3" +
                    "\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb" +
                    "\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3" +
                    "\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398";
  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();
  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
            "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
            "\1\22\1\23\1\24\1\25\1\26\1\3\1\27\1\30" +
            "\1\31\1\32\1\33\1\34\4\3\42\0\2\3\6\0" +
            "\30\3\3\0\1\4\42\0\1\6\41\0\1\35\32\0" +
            "\7\36\1\37\31\36\3\40\1\0\35\40\1\0\2\3" +
            "\6\0\1\3\1\41\1\3\1\42\1\43\1\3\1\44" +
            "\2\3\1\45\2\3\1\46\13\3\1\0\2\3\6\0" +
            "\2\3\1\47\4\3\1\50\20\3\1\0\2\3\6\0" +
            "\3\3\1\43\1\51\12\3\1\43\1\3\1\52\6\3" +
            "\1\0\2\3\6\0\1\53\6\3\1\54\20\3\1\0" +
            "\2\3\6\0\1\55\6\3\1\56\5\3\1\57\6\3" +
            "\1\60\3\3\1\0\2\3\6\0\7\3\1\61\11\3" +
            "\1\62\6\3\1\0\2\3\6\0\1\63\1\3\1\64" +
            "\25\3\1\0\2\3\6\0\11\3\1\65\2\3\1\66" +
            "\3\3\1\67\7\3\1\0\2\3\6\0\1\70\2\3" +
            "\1\71\24\3\1\0\2\3\6\0\2\3\1\72\7\3" +
            "\1\73\15\3\1\0\2\3\6\0\5\3\1\43\6\3" +
            "\1\43\2\3\1\43\10\3\1\0\2\3\6\0\2\3" +
            "\1\43\4\3\1\74\2\3\1\75\15\3\1\0\2\3" +
            "\6\0\2\3\1\52\4\3\1\76\11\3\1\77\6\3" +
            "\1\0\2\3\6\0\2\3\1\100\4\3\1\101\20\3" +
            "\1\0\2\3\6\0\2\3\1\102\16\3\1\103\6\3" +
            "\1\0\2\3\6\0\2\3\1\102\25\3\1\0\2\3" +
            "\6\0\5\3\1\104\6\3\1\105\13\3\1\0\2\3" +
            "\6\0\2\3\1\46\25\3\1\0\2\3\6\0\12\3" +
            "\1\106\11\3\1\107\3\3\3\35\2\0\34\35\7\0" +
            "\1\36\41\0\1\110\31\0\2\3\6\0\2\3\1\111" +
            "\2\3\1\112\22\3\1\0\2\3\6\0\3\3\1\113" +
            "\24\3\1\0\2\3\6\0\6\3\1\114\21\3\1\0" +
            "\2\3\6\0\11\3\1\43\1\115\15\3\1\0\2\3" +
            "\6\0\13\3\1\43\14\3\1\0\2\3\6\0\13\3" +
            "\1\116\14\3\1\0\2\3\6\0\16\3\1\117\11\3" +
            "\1\0\2\3\6\0\24\3\1\120\3\3\1\0\2\3" +
            "\6\0\4\3\1\43\23\3\1\0\2\3\6\0\12\3" +
            "\1\63\1\3\1\121\13\3\1\0\2\3\6\0\4\3" +
            "\1\122\1\3\1\123\5\3\1\124\5\3\1\43\3\3" +
            "\1\125\1\126\1\0\2\3\6\0\5\3\1\127\10\3" +
            "\1\130\11\3\1\0\2\3\6\0\3\3\1\131\24\3" +
            "\1\0\2\3\6\0\10\3\1\104\17\3\1\0\2\3" +
            "\6\0\7\3\1\132\20\3\1\0\2\3\6\0\10\3" +
            "\1\133\1\134\16\3\1\0\2\3\6\0\1\3\1\135" +
            "\26\3\1\0\2\3\6\0\5\3\1\104\22\3\1\0" +
            "\2\3\6\0\14\3\1\136\13\3\1\0\2\3\6\0" +
            "\5\3\1\137\22\3\1\0\2\3\6\0\4\3\1\140" +
            "\6\3\1\43\14\3\1\0\2\3\6\0\6\3\1\141" +
            "\3\3\1\52\15\3\1\0\2\3\6\0\6\3\1\142" +
            "\21\3\1\0\2\3\6\0\1\143\1\3\1\144\7\3" +
            "\1\145\15\3\1\0\2\3\6\0\2\3\1\146\25\3" +
            "\1\0\2\3\6\0\22\3\1\147\5\3\1\0\2\3" +
            "\6\0\6\3\1\150\2\3\1\151\16\3\1\0\2\3" +
            "\6\0\16\3\1\152\11\3\1\0\2\3\6\0\23\3" +
            "\1\43\4\3\1\0\2\3\6\0\11\3\1\153\16\3" +
            "\1\0\2\3\6\0\4\3\1\154\23\3\1\0\2\3" +
            "\6\0\14\3\1\155\13\3\1\0\2\3\6\0\3\3" +
            "\1\43\24\3\1\0\2\3\6\0\14\3\1\156\13\3" +
            "\1\0\2\3\6\0\7\3\1\43\20\3\1\0\2\3" +
            "\6\0\4\3\1\157\23\3\1\0\2\3\6\0\4\3" +
            "\1\160\23\3\1\0\2\3\6\0\7\3\1\132\2\3" +
            "\1\161\15\3\1\0\2\3\6\0\3\3\1\52\24\3" +
            "\1\0\2\3\6\0\4\3\1\162\23\3\1\0\2\3" +
            "\6\0\1\116\27\3\1\0\2\3\6\0\7\3\1\163" +
            "\20\3\1\0\2\3\6\0\1\164\27\3\1\0\2\3" +
            "\6\0\15\3\1\43\12\3\1\0\2\3\6\0\12\3" +
            "\1\132\15\3\1\0\2\3\6\0\7\3\1\165\20\3" +
            "\1\0\2\3\6\0\16\3\1\104\11\3\1\0\2\3" +
            "\6\0\21\3\1\166\6\3\1\0\2\3\6\0\2\3" +
            "\1\167\25\3\1\0\2\3\6\0\1\170\27\3\1\0" +
            "\2\3\6\0\7\3\1\171\20\3\1\0\2\3\6\0" +
            "\21\3\1\172\6\3\1\0\2\3\6\0\25\3\1\43" +
            "\2\3\1\0\2\3\6\0\16\3\1\173\11\3\1\0" +
            "\2\3\6\0\22\3\1\174\5\3\1\0\2\3\6\0" +
            "\14\3\1\43\13\3\1\0\2\3\6\0\1\175\27\3" +
            "\1\0\2\3\6\0\7\3\1\176\20\3\1\0\2\3" +
            "\6\0\4\3\1\177\23\3\1\0\2\3\6\0\5\3" +
            "\1\200\22\3\1\0\2\3\6\0\7\3\1\43\2\3" +
            "\1\201\15\3\1\0\2\3\6\0\3\3\1\116\24\3" +
            "\1\0\2\3\6\0\7\3\1\202\20\3\1\0\2\3" +
            "\6\0\25\3\1\203\2\3\1\0\2\3\6\0\16\3" +
            "\1\204\11\3\1\0\2\3\6\0\4\3\1\205\1\3" +
            "\1\206\21\3\1\0\2\3\6\0\26\3\1\207\1\3" +
            "\1\0\2\3\6\0\10\3\1\43\17\3\1\0\2\3" +
            "\6\0\12\3\1\210\15\3\1\0\2\3\6\0\11\3" +
            "\1\211\16\3\1\0\2\3\6\0\1\116\3\3\1\212" +
            "\23\3\1\0\2\3\6\0\12\3\1\213\15\3\1\0" +
            "\2\3\6\0\11\3\1\43\16\3\1\0\2\3\6\0" +
            "\2\3\1\43\25\3\1\0\2\3\6\0\7\3\1\214" +
            "\20\3\1\0\2\3\6\0\6\3\1\215\21\3\1\0" +
            "\2\3\6\0\12\3\1\153\15\3\1\0\2\3\6\0" +
            "\24\3\1\43\3\3\1\0\2\3\6\0\11\3\1\104" +
            "\16\3\1\0\2\3\6\0\3\3\1\216\24\3\1\0" +
            "\2\3\6\0\5\3\1\217\2\3\1\52\17\3\1\0" +
            "\2\3\6\0\5\3\1\173\22\3\1\0\2\3\6\0" +
            "\3\3\1\217\24\3\1\0\2\3\6\0\3\3\1\132" +
            "\24\3\1\0\2\3\6\0\3\3\1\46\24\3\1\0" +
            "\2\3\6\0\22\3\1\220\5\3\1\0\2\3\6\0" +
            "\3\3\1\63\24\3\1\0\2\3\6\0\7\3\1\221" +
            "\20\3\1\0\2\3\6\0\7\3\1\46\20\3\1\0" +
            "\2\3\6\0\12\3\1\222\15\3\1\0\2\3\6\0" +
            "\3\3\1\207\24\3\1\0\2\3\6\0\6\3\1\52" +
            "\21\3\1\0\2\3\6\0\15\3\1\57\12\3\1\0" +
            "\2\3\6\0\4\3\1\223\23\3\1\0\2\3\6\0" +
            "\17\3\1\43\10\3\1\0\2\3\6\0\10\3\1\215" +
            "\17\3\1\0\2\3\6\0\1\121\27\3\1\0\2\3" +
            "\6\0\22\3\1\212\5\3\1\0\2\3\6\0\7\3" +
            "\1\224\20\3\1\0\2\3\6\0\7\3\1\225\20\3" +
            "\1\0\2\3\6\0\1\226\27\3\1\0\2\3\6\0" +
            "\4\3\1\173\23\3\1\0\2\3\6\0\1\227\27\3" +
            "\1\0\2\3\6\0\1\43\27\3\1\0\2\3\6\0" +
            "\4\3\1\217\23\3\1\0\2\3\6\0\3\3\1\230" +
            "\24\3\1\0\2\3\6\0\4\3\1\231\23\3\1\0" +
            "\2\3\6\0\1\176\27\3\1\0\2\3\6\0\5\3" +
            "\1\43\22\3\1\0\2\3\6\0\7\3\1\217\20\3" +
            "\1\0\2\3\6\0\21\3\1\104\6\3\1\0\2\3" +
            "\6\0\14\3\1\207\13\3\1\0\2\3\6\0\1\232" +
            "\27\3\1\0\2\3\6\0\6\3\1\210\21\3\1\0" +
            "\2\3\6\0\13\3\1\233\14\3\1\0\2\3\6\0" +
            "\4\3\1\104\23\3\1\0\2\3\6\0\3\3\1\104" +
            "\24\3\1\0\2\3\6\0\12\3\1\234\15\3\1\0" +
            "\2\3\6\0\12\3\1\235\15\3\1\0\2\3\6\0" +
            "\14\3\1\52\13\3\1\0\2\3\6\0\21\3\1\227" +
            "\6\3\1\0\2\3\6\0\6\3\1\43\21\3\1\0" +
            "\2\3\6\0\2\3\1\132\25\3";
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\1\1\1\11\31\1\1\0\1\1\1\0" +
                  "\47\1\1\11\125\1";
    private static java.io.Reader zzReader = null; // Fake
  /** the current state of the DFA */
  private int zzState;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    AdaLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    AdaLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[5049];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
        int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
        int value = packed.charAt(i++);
        value--;
        do result[j++] = value; while (--count > 0);
    }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
      char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

        // store back cached position
        zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return AdaTypes.OTHER;
          }
          case 9:
              break;
          case 2: {
              return AdaTypes.IDENTIFIER;
          }
        case 10: break;
        case 6: {
            return AdaTypes.STRING_LITERAL;
        }
          case 11:
              break;
          case 5: {
              return AdaTypes.COMMENT;
          }
          case 12:
              break;
          case 8: {
              return AdaTypes.CHARACTER_LITERAL;
          }
          case 13: break;
        case 4: 
          { yybegin(YYINITIAL);
              return TokenType.WHITE_SPACE;
          }
        case 14: break;
        case 7: 
          { return AdaTypes.KEYWORD;
          }
        case 15: break;
        case 3: 
          { yybegin(YYINITIAL); return AdaTypes.CRLF;
          }
        case 16: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
